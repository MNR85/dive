{"google":"","tagline":"Start programs in unshare/lxc namespaces easily and more. Like tiny \"sshd\" listening UNIX socket for command lines with file descriptors.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Start processes in other network/mount/whatever namespace, as created by `unshare` or `lxc-start` \r\n(as long as there is a shared filesytem between the host and container and you use recent enough Linux kernel). \r\nAlso allow users execute programs in other user account or in chroot in controlled way \r\n(like sudo, but without setuid-bit in filesystem).\r\n\r\nWorks by sending file descriptors over UNIX socket. \r\n\r\n**Exampe**\r\n\r\n    # # Start dived in unshared network namespace\r\n    # unshare -n  -- dived /var/run/qqq.socket -d\r\n    # dive /var/run/qqq.socket ip addr\r\n    1218: lo: <LOOPBACK> mtu 16436 qdisc noop state DOWN \r\n        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    # dive /var/run/qqq.socket bash\r\n    # # Now we are inside that unshare\r\n    # ip link set lo up\r\n    # exit\r\n    exit\r\n    # # outside unshare again\r\n    # dive /var/run/qqq.socket bash\r\n    # ip addr\r\n    1218: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN \r\n        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n        inet 127.0.0.1/8 scope host lo\r\n    # # our network configuration persisted\r\n    \r\nUse `dived socket --unshare net` instead of `unshare -n dived socket` on kernels around v2.6.32.\r\n\r\n**Multi-user example**\r\n\r\nLet users start programs with network access disabled.\r\n\r\n    # umask 0000\r\n    # unshare -n -- dived /var/run/qqq2.socket -d\r\n    \r\n    $ dive /var/run/qqq2.socket bash\r\n    $ ping 127.0.0.1\r\n    connect: Network is unreachable\r\n    $ id\r\n    $ uid=1000(vi) gid=1000(vi) groups=1000(vi),20(dialout),21(fax),...\r\n\r\n**\"Poor man's sudo\" example 1**\r\n\r\nGrant Alice access to Bob.\r\n\r\n    root# dived /var/run/alice2bob -d -C 700 -U alice:alice -u bob\r\n    \r\n    alice$ HOME=/home/bob USER=bob dive /var/run/alice2bob bash\r\n    bob$ id\r\n    uid=1037(bob) gid=1045(bob) groups=1045(bob),1033(ololo)\r\n    bob$ exit\r\n    alice$\r\n    malice$ dive /var/run/alice2bob bash\r\n    connect: Permission denied\r\n    \r\n    \r\n**Poor man's suid-bit-less sudo example 2**\r\n\r\nAllow certain users execute certain programs (script in some directory) as root. Use client's command line arguments and filehandles, but not environment variables, current directory or controlling tty.\r\n\r\n    root# dived  /var/run/suidless_sudo --detach --user root --no-csctty --chmod 777 --no-environment  --no-chdir --no-umask -- /root/scripts/suidless_sudo\r\n    root# cat /root/scripts/suidless_sudo\r\n    #!/usr/bin/perl -w\r\n      use strict;\r\n      die(\"No script specified\") if $#ARGV == -1;\r\n      my $script = $ARGV[0];\r\n      my $user = $ENV{\"DIVE_USER\"};\r\n      die (\"No user\") unless $user;\r\n      die (\"Forbidden\") unless $user eq \"alice\";\r\n      die (\"Bad script name $script\") unless ($script =~ /^([a-zA-Z0-9_]{1,64})$/);\r\n      exec \"/root/scripts/allowed_scripts/$1\"\r\n    \r\n    alice$ dive /var/run/suidless_sudo ../../../bin/bash\r\n    Bad script name  at /root/scripts/suidless_sudo line 8.\r\n    alice$ dive /var/run/suidless_sudo reboot\r\n    Reboot started\r\n    \r\n    bob$ dive /var/run/suidless_sudo reboot\r\n    Forbidden at /root/scripts/suidless_sudo line 7.\r\n    bob$ DIVE_USER=alice dive /var/run/suidless_sudo reboot\r\n    Forbidden at /root/scripts/suidless_sudo line 7.\r\n    \r\n** Ping without suidbit example **\r\n\r\nAllow users access to ping (but not to `ping -f`) without suidbit:\r\n\r\n    root# cp /bin/ping /root/ping # loses suidbit\r\n    root# dived  /var/run/pinger --detach --effective-user root --chmod 777 --no-environment  --no-chdir  -- /root/ping\r\n    \r\n    alice$ dive /var/run/pinger 127.0.0.1\r\n    PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\r\n    64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.163 ms\r\n    64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.108 ms\r\n    ^C\r\n    --- 127.0.0.1 ping statistics ---\r\n    2 packets transmitted, 2 received, 0% packet loss, time 1002ms\r\n    rtt min/avg/max/mdev = 0.108/0.135/0.163/0.029 ms\r\n    dive: Something failed with the server\r\n    \r\n    alice$ dive /var/run/pinger -f 127.0.0.1\r\n    PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\r\n    ping: cannot flood; minimal interval, allowed for user, is 200ms\r\n\r\nTODO: Implement specifying the indifidual capabilities.\r\n    \r\n    \r\n**Authentication example**\r\n\r\ndived supports starting external programs for authentication. \r\nThe program is started when file descriptors are already received from client, but\r\nenvirontment, controlling terminal (if any), root and current directories, user and\r\numask are still original. Nonzero exit code from authentication program rejects the client.\r\n\r\n    root# dived @boblogin --detach --user bob --authenticate 'user=bob /root/askpassword' -- bash\r\n\r\n    alice$ HOME=/home/bob dive @boblogin\r\n      bob's Password: \r\n    bob$ exit\r\n    alice$ dive @boblogin\r\n      bob's Password: \r\n      Go away! (('Authentication failure', 7))\r\n      dive: Something failed with the server\r\n    alice$ \r\n\r\n\r\n\"@boblogin\" is abstract UNIX socket. \"askpassword\" program is included in source repository (uses python-pam).\r\n\r\n    \r\n**Usage**\r\n\r\n    Usage: dived {socket_path|@abstract_address|-i} [-d] [-D] [-F] [-P] [-S] [-p pidfile] \r\n    [-u user] [-C mode] [-U user:group] [-R directory] [-r [-W]] [-s smth1,smth2,...] \r\n    [-a \"program\"] [-- prepended commandline parts]\r\n              -d --detach           detach\r\n              -i --inetd            serve once, interpred stdin as client socket\r\n              -D --children-daemon  call daemon(0,0) in children\r\n              -F --no-fork          no fork, serve once (debugging)\r\n              -P --no-setuid        no setuid/setgid/etc\r\n              -u --user             setuid to this user instead of the client\r\n              -a --authenticate     start this program for authentication\r\n                  The program is started using \"system\" after file descriptors are received\r\n                  from client, but before everything else (root, current dir, environment) is received.\r\n                  Nonzero exit code => rejected client.\r\n              -S --no-setsid        no setsid\r\n              -T --no-csctty        no ioctl TIOCSCTTY\r\n              -R --chroot           chroot to this directory \r\n                  Note that current directory stays on unchrooted filesystem \r\n              -r --client-chroot    Allow arbitrary chroot from client\r\n              -W --root-to-current  Set server's root directory as current directory\r\n                                    (for using with '-r' and '-H' simultaneously)\r\n              -s --unshare          Unshare this (comma-separated list); also detaches\r\n                                    ipc,net,fs,pid,uts\r\n              -p --pidfile          save PID to this file\r\n              -C --chmod            chmod the socket to this mode (like '0777')\r\n              -U --chown            chown the socket to this user:group\r\n              -E --no-environment   Don't let client set environment variables\r\n              -A --no-argv          Don't let client set command line\r\n              -H --no-chdir         Don't let client set current directory\r\n              -O --no-fds           Don't let client set file descriptors\r\n              -M --no-umask         Don't let client set umask\r\n              --                    prepend this to each command line ('--' is mandatory)\r\n                  Note that the program beingnocsctty strarted using \"--\" should be\r\n                  as secure as suid programs, but it doesn't know\r\n                  real uid/gid.\r\n\r\n\r\n                      \r\n        Usage: dive socket_path [program arguments]\r\n    \r\n**Features**\r\n    \r\n* Absence of any filesystem permission tricks (no \"chmod +s\" required)\r\n* Secure preserving of user id and groups (requires root access)\r\n* Preserving of current directory\r\n* Preserving of all file descriptors (not only stdin/stdout/stderr)\r\n* Setting session ID and controlling terminal, for clean bash without \"no job control\" (requires root access)\r\n* Preserving of environment variables\r\n* Preserving of exit code\r\n* Selective disabling of \"preserving\" parts above \r\n* Chroot / CLONE_NEW... / forced command line\r\n* Setting of DIVE_USER and other variables according to client credentials\r\n* Allowing clients to set it's own root directory (\"-r\" option)\r\n* Setting of PR_SET_NO_NEW_PRIVS to turn off filesystem-based permission elevations\r\n* Setting Linux capabilities\r\n* \"Just execute\" feature to use capabilities, chroot, PR_SET_NO_NEW_PRIVS\r\n setup; \"authenticate\", pidfile and so on without any \"remote startup\" thought\r\n socket at all\r\n\r\nFor less feature-creep version see \"nocreep\" branch\r\n\r\n\r\n**Notes**\r\n\r\n* For clean interactive shell access dived need to be started as root (for setsid/TIOCSCTTY)\r\n    * Without TIOCSCTTY, use `socat -,raw,echo=0 exec:bash,pty,setsid,stderr` (there's hind in `dive`'s usage message) as the program to start to have nicer bash\r\n    * With TIOCSCTTY it steams controlling terminal from the previous process (leaving it \"homeless\"), so \"exec dive socket bash\" is preferred (or workaround with [reptyr](https://github.com/nelhage/reptyr) >= v0.4 is needed).\r\n* Current directory can be \"smuggled\" into the chroot or unshare where that part of filesystem is not mounted (can be prevented using -W or -H options)\r\n \r\n\r\n There are pre-built i386 binaries for [dive](http://vi-server.org/pub/dive) and [dived](http://vi-server.org/pub/dived).\r\n","name":"Dive"}