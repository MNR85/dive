.TH DIVED 1 2013-03-12 v1.2

.SH NAME

dived - listen AF_UNIX socket for requests to start programs (by
.BR dive (1)
) and more.

.SH SYNOPSIS

.BI "dived " "socket_path [options] [ " "-- " "command line ]"

.BI "dived @" "abstract_address [options] [ " "-- " "command line ]"

.BI "dived -i " "[options] [ " "-- " "command line ]"

.BI "dived -J " "[options]" " -- " "command line"


.SH DESCRIPTION

This program a helper to start another processes (by remote request or directly)
allowing using of various Linux features like capabilities, namespaces, chroot,
etc. It is simple, ligtweight and does not require configuration files. The goal
is to be a Linux tool for starting processes in various ways like 
.BR socat (1)
is a tool to use various types of sockets for various ways.

In the primary mode of operation dived listens AF_UINX socket and waits for
.BR dive (1)
to connect. Upon connection, it
 
1. Obtains the connected's client's uid/gid;

2. Retrieves all file descriptors from the client;

3. Changes into appropriate uid/gid, sets up grounps;

4. Retrieves umask, environment variables, command line arguments, current directory;

5. Starts the requested program;

6. Waits for program termination and reports back the exit code.

This gives the remote user impression that he just started the program itself,
but in fact the program is started remotely. This alone can be is useful when 
you want to start programs in other Linux namespaces.

With various options some steps can be added or removed, making additional uses,
like:

* Act like simple
.BR sudo (8)
(including with password authentication)

* Act like 
.BR chroot (8)
(also securely allowing users to use chroot)

* Act like 
.BR unshare (1)
(including for "pid" namespace)

* Act like 
.BR capsh (8)
(manage capabilities and lockbits)





.SH OPTIONS

The first command line argument must be the socket (filesystem or @abstract) path
or "-i" (--inetd)  or "-J" (--just-run).

All the rest options should each take separate element of argv (no short options 
combining supported). Option's arguments are the next argv element
(no "--long-option=argument" supported, use "--long-option argument").

"--"  stops option parsing and starts "forced command-line arguments", which limits
what can be executed with dived.

              

                             
.TP
.B -A, --no-argv
Don't let client set [part of] command line

              
.TP
.B -a, --authenticate
start this program for authentication
The program is started using "system" after file descriptors are received
from client, but before everything else (root, current dir, environment) is received.
Nonzero exit code => rejected client.
    
.TP
.B -B, --retain-capabilities
Remove all capabilities from bounding set          
except of specified ones
                                   
.TP
.B -b, --remove-capabilities 
Remove the selected capabilities from bounding set

    
.TP
.B -C, --chmod
chmod the socket to this mode (like '0777')


.TP
.B -c, --set-capabilities 
cap_set_proc this
  
.TP
.B -d, --detach
Detach from console after opening the socket


.TP
.B -D, --children-daemon
Call "daemon" in forked children. Can be useful primarily when dealing with case
when dived is started from console and not detached itself, so the started 
processes accidently receive server's controlling terminal instead of the client's
one, causing weird behaviour.

.TP
.B -e, --effective-user   
seteuid to this user instead of the client

  
.TP
.B -E, --no-environment   
Don't let client set environment variables
          

.TP
.B -F, --no-fork
Accept once, serve only one client. Useful for debugging or for starting the
requested process with pid=1 in PID namespace.




.TP
.B -H, --no-chdir         
Don't let client set current directory
          
          
                                   


.TP
.B -i, --inetd
Don't bind the socket, just use stdin (fd = 0) as accepted client's socket.

Example /etc/inetd.conf configuration line:

/var/run/qqq.dive   stream  unix    nowait  qqq     /usr/bin/dived dived -i

This allows anybody who can access /var/run/qqq.dive to run commands as user qqq.



.TP
.B -J, --just-run
Don't use the socket at all (don't receive file descriptors, argv, environment),
just start (execve) the program right away.





           
.TP
.B  -L, --lock-securebits  
set and lock SECBIT_NO_SETUID_FIXUP and SECBIT_NOROOT
          

                                             
.TP
.B -M, --no-umask        
Don't let client set umask
          
                                   
.TP
.B -n, --signals          
Transfer all signals from dive
          


.TP
.B -O, --no-fds          
Don't let client set file descriptors
          


.TP
.B -p, --pidfile          
save PID to this file
          


.TP
.B -P, --no-setuid



.TP
.B -R, --chroot           
chroot to this directory 
Note that current directory stays on unchrooted filesystem; use -W option to prevent.
          
                            
.TP
.B -r, --client-chroot    
Allow arbitrary chroot from client



.TP
.B -s, --unshare          
Unshare this (comma-separated list); also detaches
ipc,net,fs,pid,uts


    

.TP
.B -S, --no-setsid
no setsid
          
                                   
.TP
.B -T, --no-csctty        
no ioctl TIOCSCTTY
          
                                   

                                   
.TP
.B -U, --chown            
chown the socket to this user:group
          
                                   

                                   
                                   
.TP
.B  -u, --user
setuid to this user instead of the client
       
          
                                   
.TP
.B -W, --root-to-current  
Set server's root directory as current directory
(implies -H; useful with -r)
          
                                   
          

.TP
.B -w, --no-wait          
Don't fork and wait for exit code

                        
.TP
.B -X, --no-new-privs     
set PR_SET_NO_NEW_PRIVS





.SH ENVIRONMENT
dived does not use any environment variables for configuration.
But for programs it is starting it sets the following environment variables:

.TP
.B DIVE_UID
Is set to the user id of the client

.TP
.B DIVE_GID
Is set to the group id of the client

.TP
.B DIVE_PID
Is set of the PID of the program that connected to us.

.TP
.B DIVE_USER
Is set of the username of connected client 
(if it can be resolved from uid).

.TP
Note that any client's DIVE_* environment variables are discarded.




.SH EXIT STATUS
(stub)



.SH EXAMPLES
(stub)

.TP
See additional examples at http://vi.github.com/dive/


.SH CAVEATS
(stub)

.SH AUTHOR
Vitaly "_Vi" Shukela

.SH AVAILABILITY
Source code is available at https://github.com/vi/dive
